spring:
  config:
    activate:
      on-profile:
        - test
  jpa:
    database: POSTGRESQL
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: create

  datasource:
    url: jdbc:h2:mem:psql;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH;INIT=DROP SCHEMA IF EXISTS p_order CASCADE\;CREATE SCHEMA p_order\;DROP SCHEMA IF EXISTS customer CASCADE\;CREATE SCHEMA customer\;DROP SCHEMA IF EXISTS restaurant CASCADE\;CREATE SCHEMA restaurant
    username: sa


order-service:
  payment-request-topic-name: payment-request
  payment-response-topic-name: payment-response
  restaurant-approval-request-topic-name: restaurant-approval-request
  restaurant-approval-response-topic-name: restaurant-approval-response

kafka-config:
  bootstrap-servers:
    - PLAINTEXT://localhost:19082
    - PLAINTEXT://localhost:29082
    - PLAINTEXT://localhost:39082
  schema-registry-url-key: schema.registry.url
  schema-registry-url: mock://localhost:8081
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: com.sangjun.kafka.producer.TestKafkaAvroSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: com.sangjun.kafka.consumer.TestKafkaAvroDeserializer
  payment-consumer-group-id: payment-topic-consumer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

